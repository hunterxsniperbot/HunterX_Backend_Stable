import { registerDemoBuyShim } from '../bot/demoBuyShim.js';
import { findM4Candidates } from '../orchestrators/m4Candidates.js';
import { registerComandos } from '../commands/comandos.js';
import { registerCandidatos } from '../commands/candidatos.js';
import { registerCandidatos } from "../commands/candidatos.js";
import { registerAutoSniperShortcuts } from '../bot/autosniperShortcuts.js';
import { registerAutoSniperImmediate } from '../bot/autosniperImmediateReply.js';
// src/modules/start.js

/**
 * M√≥dulo 1: Handler /start
 * Env√≠a el mensaje de bienvenida e inicializa/verifica servicios en "fr√≠o".
 *
 * @param {TelegramBot} bot       Instancia de node-telegram-bot-api
 * @param {Object} services       Objetos de servicio inyectados
 *   - services.quickNode       Cliente QuickNode (RPC)
 *   - services.phantom         Cliente o helper de Phantom Wallet
 *   - services.supabase        Cliente Supabase
 *   - services.sheets          Cliente Google Sheets
 */
module.exports = function registerStartCommand(bot, services) {
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;

    // 1) Verificamos cada servicio en "fr√≠o"
    try {
      await services.quickNode.ping();          // ping a tu RPC de Solana
    } catch (e) {
      console.error('QuickNode ping failed:', e);
    }

    try {
      await services.phantom.healthCheck();     // chequeo de conexi√≥n con Phantom
    } catch (e) {
      console.error('Phantom health check failed:', e);
    }

    try {
      await services.supabase.ping();           // ping a tu BD de trades
    } catch (e) {
      console.error('Supabase ping failed:', e);
    }

    try {
      await services.sheets.ping();             // ping a Google Sheets
    } catch (e) {
      console.error('Sheets ping failed:', e);
    }

    // 2) Enviamos mensaje de bienvenida
    const welcomeMessage = [
      'üì≤ *Iniciando HunterX...*',
      'üåê Conectado a QuickNode',
      'üì° Escaneando blockchain de Solana...',
      'üß† Activando IA predictiva',
      'üéØ Precisi√≥n quir√∫rgica ACTIVADA',
      'üöÄ _¬°Listo para cazar gemas!_'
    ].join('\n');

    await bot.sendMessage(chatId, welcomeMessage, {
      parse_mode: 'Markdown'
    });
  });
};

registerCandidatos(bot);

// debug opcional
bot.on('message', (m)=>{ if (process.env.RAW_TG_DEBUG==='1') console.log('[TG]', m.text); });
registerComandos(bot);

// ===== Inline fallback: /comandos y /candidatos (seguro) =====
if (!bot.__wiredInlineBasics) {
  bot.__wiredInlineBasics = true;
  console.log('‚öôÔ∏è WIRING inline: /comandos, /help, /candidatos');

  const helpHTML = `<b>üìã Comandos disponibles</b>

<b>Sniper</b>
‚Ä¢ /autosniper ‚Äî (=on)
‚Ä¢ /autosniper on | off | status
‚Ä¢ /candidatos ‚Äî top 3 con botones DEMO

<b>DEMO trading</b>
‚Ä¢ /demo_buy &lt;usd&gt; [SIMBOLO]
‚Ä¢ /demo_sell &lt;precioUsd&gt; [SIMBOLO]
‚Ä¢ /demo_state
‚Ä¢ /demo_reset &lt;usd_inicial&gt;

<b>Wallet & registro</b>
‚Ä¢ /wallet
‚Ä¢ /registro_export

<b>Salud & estado</b>
‚Ä¢ /salud   (o /health)
‚Ä¢ /status

<b>Ayuda</b>
‚Ä¢ /mensaje ‚Äî ayuda avanzada`;

  const send = (chatId, html) =>
    bot.sendMessage(chatId, html, { parse_mode: 'HTML', disable_web_page_preview: true }).catch(()=>{});

  // /comandos y /help tolerantes a @menci√≥n y espacios
  bot.onText(/^\s*\/comandos(?:@[\w_]+)?(?:\s+.*)?\s*$/i, (msg)=> send(msg.chat.id, helpHTML));
  bot.onText(/^\s*\/help(?:@[\w_]+)?(?:\s+.*)?\s*$/i,     (msg)=> send(msg.chat.id, helpHTML));

  // /candidatos (top-3) con botones que sugieren demo_buy
  bot.onText(/^\s*\/candidatos(?:@[\w_]+)?(?:\s+.*)?\s*$/i, async (msg)=>{
    const chatId = msg.chat.id;
    let arr = [];
    try { arr = await findM4Candidates(); } catch { arr = []; }
    if (!arr.length) return send(chatId, 'üì≠ Sin candidatos por ahora. Prob√° en 1‚Äì2 minutos.');

    const top = arr.slice(0,3);
    const lines = top.map((p,i)=>
      `#${i+1} <b>${(p.baseSymbol||'?')}/${(p.quoteSymbol||'?')}</b> ‚Ä¢ ` +
      `liq $${(p.liquidityUsd||0).toFixed(0)} ‚Ä¢ ` +
      (p.fdvUsd?`FDV $${Math.round(p.fdvUsd)}`:'FDV -') +
      (p.pairAddress?` ‚Ä¢ <code>${p.pairAddress}</code>`:'')
    );

    const kb = { inline_keyboard: top.map(p=>[
      { text:`Buy DEMO $20 (${p.baseSymbol||'?'})`, callback_data:`cand:buy:20:${p.baseSymbol||'?'}` },
      { text:`Buy DEMO $50 (${p.baseSymbol||'?'})`, callback_data:`cand:buy:50:${p.baseSymbol||'?'}` },
    ])};

    await bot.sendMessage(chatId, '‚≠ê <b>Candidatos</b>\n' + lines.join('\n'),
      { parse_mode:'HTML', reply_markup: kb, disable_web_page_preview: true });
  });

  // Callback: por ahora sugiere el comando /demo_buy listo para pegar
  bot.on('callback_query', async (q)=>{
    const data = String(q.data||'');
    if (!data.startsWith('cand:buy:')) return;
    const chatId = q.message?.chat?.id;
    const [, , amtStr, sym] = data.split(':');
    const amt = Number(amtStr) || 20;
    try { await bot.answerCallbackQuery(q.id, { text:`Escrib√≠: /demo_buy ${amt} ${sym}` }); } catch {}
    await send(chatId, `Para comprar DEMO ahora, envi√°:\n/demo_buy ${amt} ${sym}`);
  });
}
// =============================================================
