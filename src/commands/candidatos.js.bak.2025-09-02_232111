export function registerCandidatos(bot){
  bot.onText(/^\/candidatos$/i, async (msg)=>{
    const chatId = msg.chat.id;
    const { findM4Candidates } = await import('../orchestrators/m4Candidates.js');
    let cands = [];
    try { cands = await findM4Candidates(); } catch(e){}
    if (!cands.length){
      return bot.sendMessage(chatId, 'üì≠ Sin candidatos por ahora. Prob√° de nuevo en 1-2 minutos.');
    }
    const top = cands.slice(0,3);
    const lines = top.map((p,i)=>(
      `#${i+1} <b>${p.baseSymbol}/${p.quoteSymbol}</b> ‚Ä¢ ` +
      `liq $${(p.liquidityUsd||0).toFixed(0)} ‚Ä¢ ` +
      (p.fdvUsd?`FDV $${Math.round(p.fdvUsd)}`:'FDV -') +
      (p.pairAddress?` ‚Ä¢ <code>${p.pairAddress}</code>`:'')
    ));
    const kb = {
      inline_keyboard: top.map((p)=>[
        { text:`Buy DEMO $20 (${p.baseSymbol})`, callback_data:`cand:buy:20:${p.baseSymbol}` },
        { text:`Buy DEMO $50 (${p.baseSymbol})`, callback_data:`cand:buy:50:${p.baseSymbol}` },
      ])
    };
    await bot.sendMessage(chatId, '‚≠ê <b>Candidatos</b>\n' + lines.join('\n'), { parse_mode:'HTML', reply_markup: kb });
  });

  // callbacks de los botones (usa tus comandos demo)
  bot.on('callback_query', async (q)=>{
    const chatId = q.message?.chat?.id;
    const data = String(q.data||'');
    if (!data.startsWith('cand:buy:')) return;
    const [, , amtStr, sym] = data.split(':'); // cand:buy:20:SOLBOMB
    const amt = Number(amtStr)||20;
    try {
      await bot.answerCallbackQuery(q.id, { text:`Comprando DEMO $${amt} ${sym}‚Ä¶` });
    } catch {}
    try {
      // Reusa tu /demo_buy: mandamos como si fuera un mensaje
      bot.emit('text', { text: `/demo_buy ${amt}`, chat:{ id:chatId }, from:q.from });
    } catch {}
  });
}
