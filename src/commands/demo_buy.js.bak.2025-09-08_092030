import { runOnce as demoBuy } from './demoBuyOnce.js';
import { sellAllDemo, getState, resetDemoBank } from '../services/demoBank.js';
import { getSheets } from '../services/sheetsClient.js';

function fmt(n, d=6){ return Number(n).toFixed(d); }

// Crea la pesta√±a si no existe
async function ensureSheetTab(sheets, spreadsheetId, title){
  const meta = await sheets.spreadsheets.get({
    spreadsheetId,
    fields: 'sheets.properties.title'
  });
  const exists = (meta.data.sheets||[]).some(s => s.properties?.title === title);
  if (!exists){
    await sheets.spreadsheets.batchUpdate({
      spreadsheetId,
      requestBody: { requests: [{ addSheet: { properties: { title } } }] }
    });
  }
}

export default function(bot){
  console.log('‚úÖ DEMO: registrando /demo_reset /demo_buy /demo_state /demo_sell /registro_export');

  // /demo_reset [USD]
  bot.onText(/^\/demo_reset(?:\s+(\d+(?:\.\d+)?))?$/i, async (msg, m) => {
    const chatId = msg.chat.id;
    const seed = Number(m?.[1] ?? 1000);
    resetDemoBank(seed);
    const s = getState();
    await bot.sendMessage(chatId,
      `üîÑ DEMO RESET a $${fmt(seed,2)}\nCash: $${fmt(s.cash,2)} | Invested: $${fmt(s.invested,2)} | Total: $${fmt(s.total,2)}`
    );
  });

  // /demo_buy [montoUSD]
  bot.onText(/^\/demo_buy(?:\s+(\d+(?:\.\d+)?))?$/i, async (msg, match) => {
    const chatId = msg.chat.id;
    const amount = Math.max(5, Math.min(2000, Number(match?.[1] ?? 20)));
    try {
      const r = await demoBuy({ token: 'SOL', amountUsd: amount });
      const s = r.state;
      const text =
`üü£ DEMO BUY ejecutado
ü™ô Token: SOL
üíµ Monto: $${fmt(amount,2)}
üí∞ Precio: $${fmt(r.priceUsd,4)}
üî¢ Qty: ${fmt(r.qty,6)}

üíº Estado:
‚Ä¢ Cash: $${fmt(s.cash,2)}
‚Ä¢ Invested: $${fmt(s.invested,2)}
‚Ä¢ Total: $${fmt(s.total,2)}
‚Ä¢ Posiciones abiertas: ${s.positions.length}`;
      await bot.sendMessage(chatId, text, { disable_web_page_preview: true });
    } catch(e){
      await bot.sendMessage(chatId, '‚ùå DEMO BUY error: '+ (e?.message||e));
    }
  });

  // /demo_state
  bot.onText(/^\/demo_state$/i, async (msg) => {
    const chatId = msg.chat.id;
    const s = getState();
    const linesPos = s.positions.map(p =>
      `‚Ä¢ ${p.token} qty=${fmt(p.qty,6)} @ $${fmt(p.priceIn,4)} (USD ${fmt(p.amountUsd,2)})`
    );
    const text =
`üìä DEMO STATE
Cash: $${fmt(s.cash,2)} | Invested: $${fmt(s.invested,2)} | Total: $${fmt(s.total,2)}
Abiertas: ${s.positions.length}
${linesPos.length ? linesPos.join('\n') : '‚Äî sin posiciones ‚Äî'}`;
    await bot.sendMessage(chatId, text);
  });

  // /demo_sell [precio] [token]
  bot.onText(/^\/demo_sell(?:\s+(\d+(?:\.\d+)?))?(?:\s+([A-Z0-9_]+))?$/i, async (msg, match) => {
    const chatId = msg.chat.id;
    const price = Number(match?.[1] ?? 120);
    const token = (match?.[2] ?? 'SOL').toUpperCase();
    try {
      const r = sellAllDemo({ token, priceUsd: price, reason: 'manual' });
      const s = getState();
      const text =
`üü£ DEMO SELL ejecutado
ü™ô Token: ${token}
üí∞ Precio salida: $${fmt(price,4)}
üí∏ Realizado (recupero + PnL): $${fmt(r.realizedUsd,2)}

üíº Estado:
‚Ä¢ Cash: $${fmt(s.cash,2)}
‚Ä¢ Invested: $${fmt(s.invested,2)}
‚Ä¢ Total: $${fmt(s.total,2)}
‚Ä¢ Posiciones abiertas: ${s.positions.length}`;
      await bot.sendMessage(chatId, text);
    } catch(e){
      await bot.sendMessage(chatId, '‚ùå DEMO SELL error: ' + (e?.message||e));
    }
  });

  // /registro_export ‚Üí escribe filas en "Registros" (crea la pesta√±a si no existe)
  bot.onText(/^\/registro_export$/i, async (msg) => {
    const chatId = msg.chat.id;
    try{
      const SHEET_ID = process.env.GOOGLE_SHEETS_ID;
      if (!SHEET_ID) throw new Error('Falta GOOGLE_SHEETS_ID en .env');
      const { closed } = getState();
      if (!closed.length){
        await bot.sendMessage(chatId, 'üìí No hay cierres para exportar todav√≠a.');
        return;
      }

      const rows = closed.map(c => ([
        c.ts,
        c.token,
        fmt(c.qty,6),
        fmt(c.priceIn,4),
        fmt(c.priceOut,4),
        fmt(c.amountUsd,2),
        fmt(c.pnlUsd,2),
        (process.env.WALLET_MODE || 'DEMO'),
      ]));

      const sheets = getSheets();
      await ensureSheetTab(sheets, SHEET_ID, 'Registros');   // ‚Üê asegura la pesta√±a
      await sheets.spreadsheets.values.append({
        spreadsheetId: SHEET_ID,
        range: 'Registros!A1',
        valueInputOption: 'USER_ENTERED',
        requestBody: { values: rows },
      });

      await bot.sendMessage(chatId, `‚úÖ Exportadas ${rows.length} fila(s) a *Registros*`, { parse_mode:'Markdown' });
    }catch(e){
      await bot.sendMessage(chatId, '‚ùå Export error: '+(e?.message||e));
    }
  });
}
