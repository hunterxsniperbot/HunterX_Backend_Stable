/**
 * inlinePnlSell.js ‚Äî Maneja botones inline:
 *   hxv1|pnl|<uid>|<tradeId>
 *   hxv1|sell|<uid>|<tradeId>|<pct>
 */
import * as demoBank from "../services/demoBank.js";

export default function registerInlinePnlSell(bot){
  if (bot._inlinePnlSellReady) return;
  bot._inlinePnlSellReady = true;
  console.log("‚úÖ inlinePnlSell listo (pnl/sell callbacks)");

  // lock anti doble tap por tradeId
  bot._opLock = bot._opLock || {};

  bot.on("callback_query", async (q) => {
    try {
      const data = String(q.data || "");
      if (!data.startsWith("hxv1|")) return;

      const parts = data.split("|");
      // formatos esperados:
      // hxv1|pnl|uid|tradeId
      // hxv1|sell|uid|tradeId|pct
      const action = parts[1];
      const uid    = parts[2];
      const tradeId= parts[3] || "";
      const pct    = parts[4] ? Number(parts[4]) : NaN;
      const chatId = q.message?.chat?.id ?? Number(uid);

      // siempre respondemos el callback para no dejarlo ‚Äúpensando‚Äù
      await bot.answerCallbackQuery(q.id, { text: "‚è≥ procesando‚Ä¶" }).catch(()=>{});

      const lockKey = `${uid}|${tradeId}|${action}`;
      if (bot._opLock[lockKey]) {
        return bot.answerCallbackQuery(q.id, { text: "‚è≥ En curso‚Ä¶", show_alert:false }).catch(()=>{});
      }
      bot._opLock[lockKey] = Date.now();

      if (action === "pnl") {
        // (placeholder) ‚Äî pr√≥ximo paso: refrescar precio y editar card
        await bot.answerCallbackQuery(q.id, { text: "üìä PnL actualizado", show_alert:false }).catch(()=>{});
        bot._opLock[lockKey] = 0;
        return;
      }

      if (action === "sell") {
        const pctClamped = Math.max(1, Math.min(100, isFinite(pct) ? pct : 0));
        const isReal = !!(bot.realMode?.[uid]);

        if (!tradeId) {
          await bot.sendMessage(chatId, "‚ùå Falta tradeId en el bot√≥n (sell)");
          bot._opLock[lockKey] = 0;
          return;
        }

        if (!isReal) {
          // DEMO ‚Äî intentos de funci√≥n en demoBank (nombres probables)
          let ok = false, err = null;
          try {
            if (typeof demoBank.sellPartialDemo === "function") {
              await demoBank.sellPartialDemo(uid, tradeId, pctClamped);
              ok = true;
            } else if (typeof demoBank.sellPercentDemo === "function") {
              await demoBank.sellPercentDemo(uid, tradeId, pctClamped);
              ok = true;
            } else if (typeof demoBank.demoSell === "function") {
              await demoBank.demoSell(uid, tradeId, pctClamped);
              ok = true;
            } else if (typeof demoBank.sell === "function") {
              await demoBank.sell(uid, tradeId, pctClamped);
              ok = true;
            }
          } catch(e){
            err = e?.message || String(e);
          }

          if (ok) {
            await bot.sendMessage(chatId, `‚úÇÔ∏è Venta DEMO ${pctClamped}% ejecutada (id=${tradeId})`).catch(()=>{});
          } else {
            await bot.sendMessage(chatId, `‚ùå DEMO: no encontr√© funci√≥n de venta en demoBank (id=${tradeId}).\nDetalle: ${err??"‚Äî"}`).catch(()=>{});
          }
        } else {
          // REAL ‚Äî pendiente: Phantom/Jupiter (confirmaci√≥n para 100%)
          await bot.sendMessage(chatId, `‚ö†Ô∏è REAL: venta ${pctClamped}% (pendiente de integrar on-chain)`).catch(()=>{});
        }

        bot._opLock[lockKey] = 0;
        return;
      }

    } catch(e) {
      console.error("[inlinePnlSell] error:", e?.message||e);
      try { await bot.answerCallbackQuery(q.id, { text: "‚ùå Error", show_alert:true }); } catch(_) {}
    }
  });
}
