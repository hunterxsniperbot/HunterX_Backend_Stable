import { getSolanaPairs as origGetSolanaPairs } from './markets.js';

const ORDER = (process.env.MARKETS_ORDER || 'gecko,raydium,dexscreener')
  .split(',').map(s => s.trim().toLowerCase());

function scoreSource(s){
  const i = ORDER.indexOf(String(s||'').toLowerCase());
  return i === -1 ? 999 : i;
}

async function fetchJson(url, { timeoutMs=2000 } = {}){
  const ac = new AbortController();
  const t = setTimeout(()=>ac.abort('timeout'), timeoutMs);
  try{
    const r = await fetch(url, {
      headers: { 'user-agent': 'Mozilla/5.0' },
      signal: ac.signal
    });
    return await r.json();
  }catch{ return null; }
  finally{ clearTimeout(t); }
}

// Fallback directo a GeckoTerminal (minimal mapping)
async function getFromGecko(limit=20){
  const out = [];
  let page = 1;
  while (out.length < limit && page <= 3){ // 3 páginas rápidas
    const url = `https://api.geckoterminal.com/api/v2/networks/solana/pools?page=${page}`;
    const j = await fetchJson(url, { timeoutMs: 2500 });
    const arr = j?.data || [];
    for (const it of arr){
      const a = it.attributes || {};
      const name = a.name || '';                 // p.ej. "TOKEN/WSOL"
      const [baseSymbol='?', quoteSymbol='?'] = name.split('/');

      // id: "solana_<poolAddress>"
      let pairAddress = null;
      if (typeof it.id === 'string' && it.id.startsWith('solana_')){
        pairAddress = it.id.slice('solana_'.length);
      }

      const basePriceUsd = a.base_token_price_usd ? Number(a.base_token_price_usd) : null;
      // distintos pools exponen reserve/liq con nombres distintos; probamos varios
      const liqUsd = a.reserve_in_usd ?? a.reserve_usd ?? a.total_reserve_in_usd ?? null;
      const fdvUsd = a.fdv_usd ?? a.fdv ?? null;

      out.push({
        source: 'gecko',
        dexId: 'unknown',
        pairAddress,
        baseSymbol,
        quoteSymbol,
        priceUsd: basePriceUsd,
        liquidityUsd: liqUsd ? Number(liqUsd) : null,
        fdvUsd: fdvUsd ? Number(fdvUsd) : null,
        // campos "extra" por si tu scanner los usa
        gecko: { raw: a },
      });
      if (out.length >= limit) break;
    }
    page++;
  }
  return out;
}

export async function getSolanaPairs(opts = {}) {
  const limit = Number(opts.limit || 20);
  let arr = [];
  try {
    arr = await origGetSolanaPairs({ limit });
    if (!Array.isArray(arr)) arr = [];
  } catch { arr = []; }

  // Si markets.js no trajo nada, usamos Gecko
  if (arr.length === 0) {
    const gk = await getFromGecko(limit).catch(()=>[]);
    arr = Array.isArray(gk) ? gk : [];
  }

  // Ordenar por fuente preferida y deduplicar
  const seen = new Set();
  const sorted = arr.sort((a,b) => scoreSource(a.source) - scoreSource(b.source));
  const out = [];
  for (const p of sorted) {
    const key = p.pairAddress || `${p.baseSymbol}|${p.quoteSymbol}|${p.dexId||p.source}`;
    if (seen.has(key)) continue;
    seen.add(key);
    out.push(p);
    if (out.length >= limit) break;
  }
  return out;
}

export default { getSolanaPairs };
