import "./src/boot/ipv4.js";
import express from 'express';
import {
  startAutoSniper,
  stopAutoSniper,
  getHealthSnapshot,
  getWalletSummary,
} from './src/api/controllers.js';

const app = express();
app.use(express.json());

// Auth por header para rutas sensibles
function requireHxKey(req, res, next) {
  const need = process.env.N8N_WEBHOOK_KEY;
  if (!need) return res.status(500).json({ ok:false, error:'Missing N8N_WEBHOOK_KEY' });
  const got = req.get('x-hx-key');
  if (got !== need) return res.status(401).json({ ok:false, error:'bad key' });
  next();
}

// Salud (acepta ?fast=1)
app.get('/api/salud', async (req, res) => {
  try { res.json(await getHealthSnapshot(req.query)); }
  catch (e) { res.status(500).json({ ok:false, error:String(e) }); }
});

// Start/Stop (protegidos)
app.post('/api/autosniper/start', requireHxKey, async (req, res) => {
  try { res.json(await startAutoSniper(req.body?.mode ?? 'DEMO')); }
  catch (e) { res.status(500).json({ ok:false, error:String(e) }); }
});
app.post('/api/autosniper/stop', requireHxKey, async (_req, res) => {
  try { res.json(await stopAutoSniper()); }
  catch (e) { res.status(500).json({ ok:false, error:String(e) }); }
});

// Status / Wallet
app.get('/api/autosniper/status', async (_req, res) => {
  try { res.json(await getWalletSummary()); }
  catch (e) { res.status(500).json({ ok:false, error:String(e) }); }
});
app.get('/api/wallet', async (_req, res) => {
  try { res.json(await getWalletSummary()); }
  catch (e) { res.status(500).json({ ok:false, error:String(e) }); }
});

const PORT = Number(process.env.API_PORT || process.env.PORT || 3000);

// --- SINGLETON GUARD ---
if (globalThis.__HX_API_SERVER) {
  console.log('ℹ️  API ya inicializada en puerto ' + PORT);
} else {
// //   const server = app.listen(PORT, () =>
    console.log('API escuchando en http://0.0.0.0:' + PORT)
  );
  server.on('error', (err) => {
    if (err && err.code === 'EADDRINUSE') {
      console.log(`ℹ️  API ya estaba en :${PORT}. Sigo sin abrir otro server.`);
    } else {
      console.error('HTTP server error:', err);
      process.exit(1);
    }
  });
  globalThis.__HX_API_SERVER = server;
}

// ===== HX singleton listen guard =====
{
  const PORT = Number(process.env.API_PORT || 3000);
  const HOST = process.env.API_HOST || '0.0.0.0';

  if (!globalThis.__HX_API_SERVER) {
    globalThis.__HX_API_SERVER = app.listen(PORT, HOST, () => {
      console.log(`API escuchando en http://${HOST}:${PORT}`);
    });
  } else {
    try {
      const addr = globalThis.__HX_API_SERVER.address?.();
      console.log('API ya estaba levantada en', addr || `${HOST}:${PORT}`);
    } catch {
      console.log('API ya estaba levantada (sin address)');
    }
  }
}
