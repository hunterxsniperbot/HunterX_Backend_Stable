// src/commands/autoSniper.js
export default function registerAutoSniper(bot, {
  quickNodeClient,
  phantomClient,
  sheetsClient,
  supabaseClient
}) {
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Handler /demo on: activa modo DEMO ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
bot.onText(/\/demo on/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  bot.demoMode[userId] = true;
  await bot.sendMessage(chatId,
    'üü° Modo *DEMO* ACTIVADO. Las operaciones ser√°n simuladas.',
    { parse_mode: 'Markdown' }
  );
});

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Handler /demo off: vuelve a modo REAL ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
bot.onText(/\/demo off/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  bot.demoMode[userId] = false;
  await bot.sendMessage(chatId,
    'üîµ Modo *REAL* ACTIVADO. Las operaciones usar√°n APIs reales.',
    { parse_mode: 'Markdown' }
  );
});
  // --- /autosniper ‚Üí arranca el sniper ---
  bot.onText(/\/autosniper/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // Si ya hab√≠a un intervalo, lo limpiamos
    if (bot._intervals[userId]) {
      clearInterval(bot._intervals[userId]);
    }

    // Aviso m√≠nimo de activaci√≥n
    await bot.sendMessage(chatId,
      `ü§ñ Sniper Autom√°tico ACTIVADO\n\n` +
      `üí∞ Monto compra por operaci√≥n: $${(bot.sniperConfig[userId]?.monto ?? 100).toFixed(2)}`
    );

    // Arrancamos el loop y lo guardamos
    bot._intervals[userId] = setInterval(async () => {
      try {
        // 1) Escaneo de nuevos tokens
        const rawTokens = await quickNodeClient.scanNewTokens();
        const now = Date.now();
        // 2) Enriquecemos y filtramos (l√≥gica oculta al usuario)
        const candidates = rawTokens
          .map(t => ({
            ...t,
            ageMinutes: t.launchTimestamp
              ? (now - t.launchTimestamp) / 60_000
              : Infinity
          }))
          .filter(t =>
            t.ageMinutes >= 1 &&
            t.ageMinutes <= 5 &&
            t.metrics.liquidity >= 150 &&
            t.metrics.fdv <= 300_000 &&
            t.metrics.holders <= 400 &&
            t.metrics.volume >= 1_500
          );

        if (!candidates.length) return;

        // 3) Para cada candidato, notificamos y ejecutamos compra
        for (const cand of candidates) {
          // Preparamos datos
          const amountUsd = bot.sniperConfig[userId]?.monto ?? 100;
          const slippage = bot.sniperConfig[userId]?.slippage ?? 1.5;
          const mintAddress = cand.mintAddress || cand.mint;

          // 3.1 Notificaci√≥n de candidato
          await bot.sendMessage(chatId,
            `üéØ **Token gema encontrado**\n` +
            `‚è±Ô∏è Edad token: **${cand.ageMinutes.toFixed(1)} min**\n` +
            `üíß Liquidez: **${cand.metrics.liquidity.toFixed(1)} SOL**\n` +
            `üìâ FDV: **${cand.metrics.fdv.toLocaleString()} USD**\n` +
            `üë• Holders: **${cand.metrics.holders}**\n` +
            `üìà Volumen: **$${cand.metrics.volume.toLocaleString()} USD/min**\n` +
            `üí∞ Monto compra: **$${amountUsd.toFixed(2)} USD**\n` +
            `üí∏ Slippage: **${slippage}%**\n` +
            `üîê Contrato renunciado: **‚úÖ**\n` +
            `üõ°Ô∏è Honeypot: **‚ùå**\n` +
            `üê≥ Whale detect: **‚úÖ**`,
            { parse_mode: 'Markdown' }
          );

          // Determinar modo DEMO o REAL
          const isDemo = bot.demoMode[userId] === true;

          let txHash;
          if (isDemo) {
          // simulaci√≥n
          txHash = `MOCK_BUY_${Date.now()}`;
          console.log(`(DEMO) Simulando compra de $${amountUsd} de mint ${mintAddress}`);
          } else {
          // ejecuci√≥n real
          txHash = await phantomClient.buyToken({ mintAddress, amountUsd, slippage });
          }
          console.log(`‚úÖ Compra ejecutada: ${txHash}`);

          // 3.3 Log en consola
          console.log(`‚úÖ COMPRA EJECUTADA: ${txHash}`);

          // 3.4 Opcional: guardamos en Sheets
          await sheetsClient.appendRow([
            new Date().toISOString(),
            userId,
            cand.symbol,
            amountUsd,
            cand.currentPrice || cand.metrics.priceUsd || '',
            slippage,
            txHash
          ]);

          // 3.5 Confirmaci√≥n final al usuario
          await bot.sendMessage(chatId,
            `‚úÖ **COMPRA EJECUTADA**\n` +
            `ü™ô **${cand.symbol}**\n` +
            `- Monto: $${amountUsd.toFixed(2)} USD\n` +
            `- Entrada: ${cand.amountToken?.toFixed(6) ?? '‚Äì'}\n` +
            `- TX: \`${txHash}\``,
            { parse_mode: 'Markdown' }
          );
        }
      } catch (err) {
        console.error(`‚ùå Error en sniper loop [${userId}]:`, err);
      }
    }, bot.sniperConfig[userId]?.scanInterval ?? 15_000);
  });
// ‚Äî‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì
  // M√ìDULO 6: Venta Autom√°tica (Stop Profit)
  // ‚Äî‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì
  if (!bot._stopProfitInterval) {
    const stopProfitRules = [
      { target: 1.00, sellPct: 0.30 },
      { target: 2.50, sellPct: 1.25 },
      { target: 5.00, sellPct: 2.00 },
      { target: 7.50, sellPct: 3.00 },
      { target:10.00, sellPct: 4.00 },
      { target:20.00, sellPct: 8.00 },
    ];
   // ‚Äî‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì
// 1.b) Comando de debug para pruebas  
// ‚Äî‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì
bot.onText(/\/debug/, async (msg) => {
  const uid = String(msg.from.id);
  // Forzamos entryPrice muy bajo y precioNow muy alto:
  if (bot._positions?.[uid]?.length) {
    bot._positions[uid][0].entryPrice = 0.001;
    // Sobrescribimos temporalmente getPrice:
    quickNodeClient.getPrice = async () => 0.01;
    await bot.sendMessage(msg.chat.id,
      'üõ†Ô∏è Debug activado: entryPrice=0.001, priceNow=0.01 ‚Üí Stop-Profit en el pr√≥ximo ciclo'
    );
  } else {
    await bot.sendMessage(msg.chat.id,
      '‚ö†Ô∏è No hay posiciones para debug. Primero haz una compra autom√°tica.'
    );
  }
});
    bot._stopProfitInterval = setInterval(async () => {
      for (const uid of Object.keys(bot._positions || {})) {
        const chat = Number(uid);
        for (const pos of bot._positions[uid]) {
          for (const rule of stopProfitRules) {
            // ya vendimos este target?
            if (pos.soldPct.includes(rule.target)) continue;

            let priceNow;
            try {
              priceNow = await quickNodeClient.getPrice(pos.tokenSymbol);
            } catch {
              console.warn(`‚ö†Ô∏è No pude obtener precio para ${pos.tokenSymbol}`);
              continue;
            }
            const gain = priceNow / pos.entryPrice;
            if (gain >= rule.target) {
              pos.soldPct.push(rule.target);
              const percent = rule.sellPct * 100; // 0.30 ‚Üí 30%

              // ejecuta venta parcial
              const txSell = await phantomClient.sellToken({
                buyTxSignature: pos.txSignature,
                percent
              });

              // notifica al usuario
              await bot.sendMessage(chat,
                `üõë *Stop Profit* +${(rule.target*100).toFixed(0)}% ‚Üí vend√≠ ${percent.toFixed(0)}%\n` +
                `ü™ô ${pos.tokenSymbol}\n` +
                `Precio actual: ${priceNow.toFixed(6)}\n` +
                `TX: \`${txSell}\``,
                { parse_mode: 'Markdown' }
              );
            }
          }
        }
      }
    }, 5000);
  }

  // ‚Äî‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì
  // Handler /stop: detiene ambos loops
  // ‚Äî‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì
  bot.onText(/\/stop/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // limpia loop de compra
    if (bot._intervals[userId]) {
      clearInterval(bot._intervals[userId]);
      delete bot._intervals[userId];
    }
    // limpia loop de venta
    if (bot._stopProfitInterval) {
      clearInterval(bot._stopProfitInterval);
      delete bot._stopProfitInterval;
    }

    await bot.sendMessage(chatId, 'üî¥ Sniper Autom√°tico DETENIDO');
  });

} // ‚Üê cierre de registerAutoSniper
