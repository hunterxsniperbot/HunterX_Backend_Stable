// src/commands/mode.js
import * as state from '../services/state.js';

// (por si en el futuro lo necesitÃ¡s aquÃ­)
function escHtml(s){
  return String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
}

export default function registerMode(bot){
  bot.realMode = bot.realMode || {};

  // Cargar de persistencia si existiera (best-effort)
  state.getRealModeMap?.()
    .then(map => { if (map && typeof map==='object') bot.realMode = { ...map, ...bot.realMode }; })
    .catch(()=>{});

  const reply = (chatId, uid, isReal) => {
    const on = !!(bot._sniperOn && bot._sniperOn[uid]);
    const lines = [
      isReal ? '<b>âš¡ Modo REAL activado</b>' : '<b>ðŸ§ª Modo DEMO activado</b>',
      'Sniper: ' + (on ? '<b>ON</b> (opera en ' + (isReal?'<b>REAL</b>':'<b>DEMO</b>') + ')' : '<b>OFF</b>'),
    ];
    return bot.sendMessage(chatId, lines.join('\n'), { parse_mode: 'HTML' });
  };

  bot.onText(/^\s*\/real\s*$/i, async (msg) => {
    const chatId = msg.chat.id;
    const uid = String(msg.from.id);
    bot.realMode[uid] = true;
    state.setRealMode?.(uid, true).catch(()=>{});
    return reply(chatId, uid, true);
  });

  bot.onText(/^\s*\/demo\s*$/i, async (msg) => {
    const chatId = msg.chat.id;
    const uid = String(msg.from.id);
    bot.realMode[uid] = false;
    state.setRealMode?.(uid, false).catch(()=>{});
    return reply(chatId, uid, false);
  });

  console.log('âœ… Handler cargado: mode.js');
}
