/**
 * Servicio de precios con fallback + caché (TTL) para Solana.
 * Orden de fuentes:
 *  - Tokens generales: Birdeye -> DexScreener
 *  - SOL/WSOL: Birdeye -> DexScreener -> CoinGecko -> CoinMarketCap
 *
 * Requiere (opcional):
 *   BIRDEYE_API_KEY (para mejores cuotas)
 *   CMC_API_KEY     (solo fallback SOL)
 * Config:
 *   PRICES_TTL_MS   (default 15000 ms)
 */

const WSOL = 'So11111111111111111111111111111111111111112';
const USDC = 'EPjFWdd5AufqSSqeM2q9vGaHF5Z6wNe11f9DoE2Q96';
const TTL  = Number(process.env.PRICES_TTL_MS || 15000);

const cache = new Map(); // key: mint -> {price, source, ts}

/* utils */
async function fetchJSON(url, { headers = {}, timeoutMs = 5000 } = {}) {
  const ctrl = new AbortController();
  const t = setTimeout(()=>ctrl.abort(), timeoutMs);
  try {
    const r = await fetch(url, { headers, signal: ctrl.signal });
    if (!r.ok) throw new Error(`HTTP ${r.status}`);
    return await r.json();
  } finally { clearTimeout(t); }
}

function isFresh(ts){ return (Date.now() - ts) < TTL; }
function setCache(mint, price, source){ cache.set(mint, { price, source, ts: Date.now() }); }
function getCache(mint){ const c = cache.get(mint); return c && isFresh(c.ts) ? c : null; }
function isWSOL(m){ return (m === WSOL); }

/* ── Fuentes ────────────────────────────────────────────────────────────── */
async function priceBirdeye(mint){
  const key = process.env.BIRDEYE_API_KEY || '';
  const headers = { 'x-chain': 'solana' };
  if (key) headers['X-API-KEY'] = key;
  const j = await fetchJSON(`https://public-api.birdeye.so/public/price?address=${mint}`, { headers });
  if (!j?.data?.price) throw new Error('birdeye: no price');
  return Number(j.data.price);
}

async function priceDexscreener(mint){
  const j = await fetchJSON(`https://api.dexscreener.com/latest/dex/tokens/${mint}`);
  const pairs = Array.isArray(j?.pairs) ? j.pairs : [];
  // elegimos la de mayor liquidez en Solana
  const solPairs = pairs.filter(p=>p?.chainId==='solana' && p?.priceUsd);
  if (!solPairs.length) throw new Error('dexs: no pairs');
  solPairs.sort((a,b)=> (Number(b.liquidity?.usd||0) - Number(a.liquidity?.usd||0)));
  return Number(solPairs[0].priceUsd);
}

async function priceCoingeckoSOL(){
  const j = await fetchJSON('https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd');
  const p = j?.solana?.usd;
  if (!p) throw new Error('coingecko: no sol price');
  return Number(p);
}

async function priceCMC_SOL(){
  const key = process.env.CMC_API_KEY;
  if (!key) throw new Error('cmc: missing key');
  const j = await fetchJSON('https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?symbol=SOL', {
    headers: { 'X-CMC_PRO_API_KEY': key }
  });
  const p = j?.data?.SOL?.quote?.USD?.price;
  if (!p) throw new Error('cmc: no sol price');
  return Number(p);
}

/* ── Orquestador ───────────────────────────────────────────────────────── */
async function getPrice(mint){
  if (!mint) throw new Error('mint required');

  // Caché
  const c = getCache(mint);
  if (c) return c;

  // Fallback tokens generales
  const tryGeneral = async ()=>{
    try { const p = await priceBirdeye(mint); setCache(mint,p,'birdeye'); return cache.get(mint); } catch(_) {}
    try { const p = await priceDexscreener(mint); setCache(mint,p,'dexscreener'); return cache.get(mint); } catch(_) {}
    throw new Error('all general providers failed');
  };

  // Fallback SOL/WSOL
  const trySOL = async ()=>{
    // Primero general (birdeye/dexs)
    try { return await tryGeneral(); } catch(_) {}
    // Luego CoinGecko / CMC
    try { const p = await priceCoingeckoSOL(); setCache(mint,p,'coingecko'); return cache.get(mint); } catch(_) {}
    try { const p = await priceCMC_SOL(); setCache(mint,p,'cmc'); return cache.get(mint); } catch(_) {}
    throw new Error('all SOL providers failed');
  };

  if (isWSOL(mint)) return await trySOL();
  return await tryGeneral();
}

export async function getPriceUSD(mint){
  const { price } = await getPrice(mint);
  return price;
}
export async function getPriceWithSource(mint){
  const { price, source } = await getPrice(mint);
  return { price, source, ts: cache.get(mint).ts };
}
export function _clearPriceCache(){ cache.clear(); }

// helpers comunes
export const MINTS = { WSOL, USDC };
